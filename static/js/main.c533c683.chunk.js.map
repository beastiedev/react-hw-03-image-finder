{"version":3,"sources":["components/Searchbar/index.jsx","components/ImageGalleryItem/index.jsx","components/ImageGallery/index.jsx","components/Button/index.jsx","components/Modal/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Searchbar","state","queryString","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","onChange","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","image","onGalleryItemClick","onClick","src","webformatURL","alt","id","ImageGallery","window","scrollTo","top","document","documentElement","scrollHeight","behavior","scrollDown","gallery","map","key","PureComponent","Button","onLoadMore","Modal","handleOnOverlayClick","onCloseModal","handleOnModalClick","stopPropagation","handleCloseModal","code","addEventListener","removeEventListener","largeImageURL","App","PIXABAY_API_KEY","page","loading","modal","modalImage","handleOnSubmitSearchbar","search","getGallery","handleOnLoadMore","handleOnGalleryItemClick","handleOnCloseModal","axios","get","then","response","setUniq","data","hits","filter","item","index","self","findIndex","t","color","height","width","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c533c683.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Searchbar extends Component {\n  state = {\n    queryString: \"\",\n  };\n\n  handleInputChange = (e) => this.setState({ queryString: e.target.value });\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit({\n      queryString: this.state.queryString,\n    });\n  };\n\n  render() {\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            onChange={this.handleInputChange}\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Searchbar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ImageGalleryItem = ({ image, onGalleryItemClick }) => {\n  return (\n    <li className=\"ImageGalleryItem\" onClick={() => onGalleryItemClick(image)}>\n      <img\n        src={image.webformatURL}\n        alt={image.id}\n        className=\"ImageGalleryItem-image\"\n      />\n    </li>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  image: PropTypes.shape({\n    id: PropTypes.number,\n    webformatURL: PropTypes.string,\n    largeImageURL: PropTypes.string,\n  }),\n};\n\nexport default ImageGalleryItem;\n","import React, { PureComponent } from \"react\";\nimport ImageGalleryItem from \"../ImageGalleryItem\";\nimport PropTypes from \"prop-types\";\n\nclass ImageGallery extends PureComponent {\n  scrollDown() {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: \"smooth\",\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollDown();\n  }\n\n  render() {\n    return (\n      <ul className=\"ImageGallery\">\n        {this.props.gallery.map((image) => (\n          <ImageGalleryItem\n            key={image.id}\n            image={image}\n            onGalleryItemClick={this.props.onGalleryItemClick}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  image: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      webformatURL: PropTypes.string,\n      largeImageURL: PropTypes.string,\n    })\n  ),\n};\n\nexport default ImageGallery;\n","import React from \"react\";\n\nconst Button = ({ onLoadMore }) => {\n  return (\n    <button className=\"Button\" onClick={onLoadMore}>\n      Load more\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\n\nclass Modal extends Component {\n  handleOnOverlayClick = () => {\n    this.props.onCloseModal();\n  };\n\n  handleOnModalClick = (e) => {\n    e.stopPropagation();\n  };\n\n  handleCloseModal = (e) => {\n    if (e.code === \"Escape\") {\n      this.props.onCloseModal();\n    }\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleCloseModal);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleCloseModal);\n  }\n\n  render() {\n    return (\n      <div className=\"Overlay\" onClick={this.handleOnOverlayClick}>\n        <div className=\"Modal\" onClick={this.handleOnModalClick}>\n          <img src={this.props.image.largeImageURL} alt={this.props.image.id} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Searchbar from \"./components/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery\";\nimport axios from \"axios\";\nimport Button from \"./components/Button\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport Modal from \"./components/Modal\";\n\nclass App extends Component {\n  PIXABAY_API_KEY = \"18287920-2c6b357e03b1c2c3350c52738\";\n  state = {\n    gallery: [],\n    queryString: \"\",\n    page: 1,\n    loading: false,\n    modal: false,\n    modalImage: {},\n  };\n\n  handleOnSubmitSearchbar = (search) => {\n    this.setState(\n      { gallery: [], page: 1, queryString: search.queryString },\n      this.getGallery\n    );\n  };\n\n  handleOnLoadMore = () => {\n    this.setState(\n      ({ page }) => ({\n        page: page + 1,\n      }),\n      this.getGallery\n    );\n  };\n\n  handleOnGalleryItemClick = (image) => {\n    this.setState({ modal: true, modalImage: image });\n  };\n\n  handleOnCloseModal = () => {\n    this.setState({ modal: false, modalImage: null });\n  };\n\n  getGallery() {\n    this.setState({ loading: true }, () =>\n      axios\n        .get(\n          `https://pixabay.com/api/?q=${this.state.queryString}&page=${this.state.page}&key=${this.PIXABAY_API_KEY}&image_type=photo&orientation=horizontal&per_page=12`\n        )\n        .then((response) => {\n          this.setState(({ gallery }) => ({\n            gallery: this.setUniq([...gallery, ...response.data.hits]),\n            loading: false,\n          }));\n        })\n    );\n  }\n\n  setUniq(gallery) {\n    return gallery.filter(\n      (item, index, self) => index === self.findIndex((t) => t.id === item.id)\n    );\n  }\n\n  componentDidMount() {\n    this.getGallery();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchbar onSubmit={this.handleOnSubmitSearchbar} />\n        <ImageGallery\n          gallery={this.state.gallery}\n          onGalleryItemClick={this.handleOnGalleryItemClick}\n        />\n        {this.state.loading && (\n          <Loader\n            className=\"Loader\"\n            type=\"ThreeDots\"\n            color=\"#00BFFF\"\n            height={80}\n            width={80}\n          />\n        )}\n        {!!this.state.gallery.length && (\n          <Button onLoadMore={this.handleOnLoadMore} />\n        )}\n        {this.state.modal && this.state.modalImage && (\n          <Modal\n            onCloseModal={this.handleOnCloseModal}\n            image={this.state.modalImage}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}